import platform
import subprocess
import time

def get_uptime_linux():
    # On Linux, use the 'uptime' command and parse the result
    try:
        output = subprocess.check_output(['uptime', '-p']).decode().strip()
        return output
    except Exception as e:
        print(f"Error getting uptime on Linux: {e}")
        return None

def get_uptime_windows():
    # On Windows, use 'net stats workstation' command to get uptime
    try:
        proc = subprocess.Popen('net stats workstation', shell=True, stdout=subprocess.PIPE)
        output = proc.communicate()[0].decode()
        for line in output.splitlines():
            if "Statistics since" in line:
                # Parse the line that contains the date and time
                start_time_str = line.split("since")[1].strip()
                start_time = time.strptime(start_time_str, "%m/%d/%Y %I:%M:%S %p")
                start_time_epoch = time.mktime(start_time)
                return time.time() - start_time_epoch
    except Exception as e:
        print(f"Error getting uptime on Windows: {e}")
        return None

def format_runtime(seconds):
    days = seconds // (24 * 3600)
    seconds %= (24 * 3600)
    hours = seconds // 3600
    seconds %= 3600
    minutes = seconds // 60
    return f"{int(days)} days, {int(hours)} hours, {int(minutes)} minutes"

def get_os_uptime():
    os_type = platform.system()
    if os_type == "Linux":
        # Using uptime -p to get the human-readable uptime on Linux
        uptime_str = get_uptime_linux()
        return f"System uptime: {uptime_str}"
    elif os_type == "Windows":
        uptime_seconds = get_uptime_windows()
        if uptime_seconds:
            return f"System uptime: {format_runtime(uptime_seconds)}"
    else:
        return "Unsupported OS"

if __name__ == "__main__":
    uptime = get_os_uptime()
    if uptime:
        print(uptime)
